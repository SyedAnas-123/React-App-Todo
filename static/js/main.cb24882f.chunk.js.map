{"version":3,"sources":["components/About.js","components/Navbar.js","components/Textform.js","components/Alertss.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","border","borderColor","React","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Navbar","concat","modes","Link","to","title","aria-label","aria-current","aboutText","role","placeholder","onClick","toggleModes","htmlFor","Textform","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","heading","value","onChange","event","target","rows","disabled","length","oldText","toLowerCase","showalert","newText","toUpperCase","split","join","filter","element","Alertss","height","Alert","typeofalert","msg","App","setmode","_useState3","_useState4","alert","setalert","message","setTimeout","Router","document","body","Switch","Route","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.cb24882f.chunk.js","sourcesContent":["import React  from \"react\";\r\n\r\nexport default function About(props) {\r\n  // const [myStyle, setmyStyle] = useState({\r\n  //   //making an java script object first and now we change it and using it like a state\r\n  //   color: 'black ',\r\n  //   backgroundColor: 'white',\r\n  // });\r\n\r\n  //1: not taking state og =f my style  we can also use as a variable and send and send objects and using logic of dark mode on about section .\r\n//2 : also send mode to about componet take usko pta to ho mode black he ya white ?\r\n\r\n\r\n  let myStyle ={    \r\n    color : props.mode === 'dark' ? 'white' : '#042743',    //we write logic for dark mode on about section \r\n    backgroundColor :props.mode==='dark'? 'rgb(36 74 104)' : 'white',\r\n     border: '2px solid',                                       //taking boder conditionally bcz agr mode light ho to border black wrna white condition de rhe hen\r\n     borderColor: props.mode === 'dark' ? 'white' : '#042743'\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    // calling of that object\r\n    // bcz dont want the color of the upee dark mode logic to this just jbh bblack hoga to normal background jesa color iska hojaeega herading ka\r\n    <div className=\"container\" style={ {color : props.mode === 'dark' ? 'white' : '#042743'}}> \r\n      <h1 className=\"my-5 active \">About Us</h1>\r\n      {/* using style */}\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              //   here csss\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            {/* here css */}\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              // here csss\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            {/* here css */}\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              // here css\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            {/* here csss */}\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n     \r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n// 1.dark mode ka jo about me buttto n he js se dark mode enable hoga wo sb hata den gen...  ager dikhna ho dusree flder em ja kr dikhlen\r\n// 2: ToGGLE STYLE FUNCTION BH HATA DIYA KU KE WO SIRF DARK MODE KE LIYE THA KHALI.\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.modes} bg-${props.modes}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n\r\n          {/* switch button */}\r\n          {/*yhn jo  me n text light jo clas rkhi thi usko chnge kr ke ternitary operation se ke wo abh depend kregi mode pr take text nazr asake so making this className staring by ` ` and using js in it and dollar sign so call any variables */}\r\n          {/* just changing text color on white to black and from black to wh */}\r\n          {/* this explains when props.modes which light is === to light then ot becomes dark otherwise it becomes lights when black on text */}\r\n          <div className={`form-check form-switch text-${props.modes==='light'?'dark':'light'} `}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              //this toggle function will run when anyon click omn the swithc button so using onclik event\r\n              // calling props of fucntion in onclick event \r\n              onClick={props.toggleModes}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >\r\n                Enable Dark Mode    </label>\r\n                \r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string,\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  // wanr disable to be a variable\r\n\r\n  const handleUpClick = () => {\r\n    //arrow function\r\n    // console.log(\"button was clicked\" ); // fpor only consolelogs we can remove these\r\n    // setText(\"you havnot click this\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showalert(\"Converted to Uppercase\", \"Success\");\r\n  };\r\n\r\n  // 2 button\r\n  const handleDownClick = () => {\r\n    let oldText = text.toLowerCase();\r\n    setText(oldText);\r\n    props.showalert(\"Converted to Lowercase \", \"Success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\" ON chamge\")\r\n    setText(event.target.value); // for writing  new text\r\n  };\r\n\r\n  const clearup = () => {\r\n    // console.log(\" ON chamge\")\r\n    setText(\"\"); // for writing  new text\r\n    props.showalert(\"All text have been Cleared \", \"Success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    //used regix in java script\r\n    let newText = text.split(/[ ]+/); // if one or more then one spaces is identified it splits the text and join with one space In summary, the handleExtraSpaces function takes a string, splits it into an array using one or more consecutive spaces as the separator, and then joins the array elements back into a string with single spaces as the separator. This effectively removes any extra spaces from the original string.\r\n\r\n    setText(newText.join(\" \"));\r\n    props.showalert(\"All extra spaces are removed \", \"Success\");\r\n  };\r\n\r\n  const [text, setText] = useState(\" \");\r\n  // now all work of changind dark mode and all text into whoite color done in this component\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1 className=\"mb-4\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          {/* chnaging color of text area only so uisnf style and double braxes bcz js ke undr aik object  le rha hun like css in it etc */}\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#13466e\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          disabled = {text.length===0}  // if text have nothing buttons are being disabled .\r\n          className=\"btn btn-primary mx-2 my-2\"\r\n          onClick={handleDownClick}\r\n        >\r\n          Convert to lowerCase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          disabled = {text.length===0}\r\n          className=\"btn btn-primary mx-2 my-2\"\r\n          onClick={handleUpClick}\r\n        >\r\n          Convert to uppercase\r\n        </button>\r\n\r\n        <button\r\n          type=\"button\"\r\n          disabled = {text.length===0}\r\n          className=\"btn btn-primary mx-2 my-2\"\r\n          onClick={clearup}\r\n        >\r\n          Undo all\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          disabled = {text.length===0}\r\n          className=\"btn btn-primary mx-2 my-2\"\r\n          onClick={handleExtraSpaces}\r\n        >\r\n          {\" \"}\r\n          Remove Extra Spaces\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        className=\"conatiner my-5\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h2>Your Text Summary</h2>\r\n\r\n        {/* logic for counting no of words in text box and removinf the default string which creates words = 1   */}\r\n\r\n        <p>\r\n          {text.split(\" \").length > 1 ? text.split(\" \").length - 1 : 0} words\r\n          and {text.length} charahters\r\n        </p>\r\n\r\n        <p>\r\n          {0.008 *\r\n            text.split(\" \").filter((element) => {\r\n              return element.length !== 0;\r\n            }).length}{\" \"}\r\n          Minutes read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        {/* now making logic if text =  empty then  */}\r\n        <p>\r\n          {\" \"}\r\n          {text.length > 0\r\n            ? text\r\n            : \"Nothing to preview....\"}{\" \"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// age text khali he to sare buttons kam nn krengen\r\n","import React from 'react'\r\n// 1.we are sending props for alert\r\n// 2 .we are making satte of alert in app.js like wwe have created for modes\r\nfunction Alertss(props) {\r\n  return (\r\n  \r\n    <div style={{height:'50px'}}>\r\n    {\r\n   props.Alert && <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n <strong > {props.Alert.typeofalert} </strong> :  {props.Alert.msg}\r\n \r\n</div>}\r\n\r\n</div>\r\n\r\n    \r\n \r\n      \r\n  \r\n  )\r\n}\r\n\r\nexport default Alertss\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//1: malikngn alert Component, passing props of alert , making satte of alert in App.js.\r\n// 2 : we are making alert an object  and then write a method of  show alert() ,after that we are settign alert\r\n// 3: we have just passsd a fucntion with bparameters to give value in it {showalert = (message, type)} like that it is the same function now we are setting setalert bt passing the message and its type=> type isin bootstrap of alert of success , warning alert of different colors\r\n// 4 :   setalert({\r\n//      msg : message,\r\n//      typeofalert : type,\r\n //   })      ( setting alert and used {} inside () bcz we are usinf jv  declaring avriables and save hte value of parameters in these variables noe alert have become an object firstly it is null )\r\n\r\n // 5: noe passing the state alert which is null to the alert in app.js to render what ever we set alert <Alertss Alert={alert}/>\r\n// 6: now strong > {props.Alert.type} </strong>: {props.Alert.msg} in alert.js if type is success then it renders sucess and if msgthen it also renderws after success\r\n// 7 : we wan ther alert msg in when we enabled or disabled dark or lightmode so we use thwe function in them \r\n  // const toggleMode = () => {\r\n  //   if (mode === \"light\") {\r\n  //     setmode(\"dark\");\r\n  //     document.body.style.backgroundColor = \"#091e3d\";\r\n  //    {{{{showalert(\"Dark mode has been enabled \", \"success\");}}}}}  //\r\n  //   } else {\r\n  //     setmode(\"light\");\r\n  //     document.body.style.backgroundColor = \"white\";\r\n  //    {{{{ showalert(\"Dark mode has been enabled \", \"success\");}}}}n  //\r\n\r\n  //   }\r\n/// 8 : now it is displaying error null so we will use a logic like we also can do the if else statement but we prefer the the logiv which mostly comminuty used      {\r\n  \r\n//   =>    props.Alert &&   <=   <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n// <strong > {props.Alert.type} </strong> :{props.Alert.msg}\r\n//  <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n// </div>\r\n// }    && operator used klrengen as me to sb se phlee jo iske chzlikhii hue bhe wo evaluate hogi if it nulss aghe loi bh chez evaluate nh hogi eg;\r\n// AGR KOI TEXT AREA PR CLICK KR KE KOI CHZ CAPITAL YA DARK MODE ENABLE NH KREGA TO ALERT KI VALUE NULLHI RAHEGI OR AGR KREGA TO SETALERT RUN  HOGA JO SHOW ALERT KE FUNCTION ME HEW OR JAHAN JAHAN SHOW ALERT LIKHA HAU HE WAHAN PR YE CHZ EVALUATE HOAJEE JESE BUTTTONS ME LOWER TO UPPER OR ETC ME   \r\n//0 : ABH COLOR CHANGE KRNA HE TO  JO ALERT.MSG.TYPE KA CODE HE WO UPR CLASSNAME EM CHALEGA WARNING KI JAHAN SUCCES AEEGA TO CJANHE HOJAEEGA hm direct sucees kr ke bh kr skte hen .\r\n\r\n//10: abh hnhe sucees ke s ko capital krns ths to m  n direstc type me ja kr S capital kr diya abkin harry ne function bana klr kra he to js se {video 13 11.20 }pr ja kr dikh lo\r\n\r\n//11 :padddinf show aklert in tetx form to see the changes we made when cpaitalize the text {  <Textform mode={mode} showalert={showalert} heading=\"Enter The Text To Analyze Below\" /> } \r\n\r\n// 12 : understanf the logic of priopsa in upr point we have declarred a props showalert = {showalert} <= whic is a fucntion we call it like a props that fiorst show alerrt is a variable and inside it it have a text so in etxt form we call it like props.showalert to dsiplay what ever in showalert variable  {} props. showalert(\"All text have been Cleared \",\"Success\");}and it only shows when the show alert have some text and type ]\r\n\r\n//13 : now want alert to disapper after some time so used set timer in app.js \r\n// after 1 sec it is null setTimeout(() => {\r\n//   setalert(null)\r\n// }, 1500);\r\n\r\n\r\n\r\n\r\n\r\n// ****************************************************************************************\r\n// 1: we wqnt that ke layout change na hO pae to put a div contaimer","import \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport Textform from \"./components/Textform\";\nimport React, { useState } from \"react\";\nimport Alertss from \"./components/Alertss\";\nimport \"./App.css\";\n//for routing\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n \n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\"); // IT REPRENSTS whether dark mode is enabled or not.it represents appliaction state\n\n  // y use state dark tha abh light kr diya ku ke y ulta horha tha\n  // using condiitom if light then dark and if dark then light and call that function in switch\n\n  //************************************************************************doing black background */\n  // i have my SATE in app,js so in ca use document . body means all body not header .style using css and bg to black\n\n  // 1. ALERT STATE:\n  const [alert, setalert] = useState(null);\n  //function\n  const showalert = (message, type) => {\n    setalert({\n      msg : message,\n      typeofalert : type,\n    })\n    setTimeout(() => {\n      setalert(null)\n    }, 1500);\n\n    \n  }\n\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#091e3d\";\n      showalert(\"Dark mode has been enabled \",\"Success\");\n     \n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showalert(\"Light mode has been enabled \",\"Success\");\n     \n       // for chamaknee wlaa ttile\n\n      //  setInterval(() => {\n      //   document.title= \" text Utils is Amazind\";\n      //  }, 2000);                                                      \n\n      //  setInterval(() => {\n      //   document.title= \" Download text Utils on ur DeskTop\";\n      //  }, 1500);\n\n\n    }\n  };\n\n  return (\n    <>\n    <Router>\n      {/* mode is a props and used as a state and toggle mode is a function  and used as a props and using togglr mode we amke an event and using that event we set our mode and call this event function in switch */}\n      <Navbar\n        title=\"Text Utils Blog\"\n        modes={mode}\n        toggleModes={toggleMode}\n        aboutText=\"About \"\n        \n      />\n<Alertss Alert={alert}/>\n\n        <div className=\"container my-3\">\n          {/* text form ko bta diya ke bahe mera mode ye he like light */}\n          <Switch>\n          <Route path=\"/about\">\n            <About mode={mode} />\n          </Route>\n          \n          <Route path=\"/\">\n          <Textform mode={mode} showalert={showalert} heading=\"Try TextUtils - Word Counter , Charachter Counter ,Remove extra spaces\" />\n          </Route>\n          \n        </Switch>\n        </div>\n        </Router>\n\n       \n{/* we want about pr jbh click ho to about ajaee to filhal text form ko hata diya  */}\n        \n     \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}